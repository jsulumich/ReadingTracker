@model ReadingTracker.Data.Statistic;

@{
    ViewData["Title"] = "Statistics";
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<h1>Statistics</h1>

<hr />

<div class="d-flex align-items-center">
    <form asp-action="Index">
        <label for="yearSelector" style="width:100px; font-weight:bold;">Select Year:</label>
        <select id="yearSelector" class="form-select" style="width:100px;" name="year" onchange="this.form.submit()">
            <option value="@ViewBag.selectedYear">@ViewBag.selectedYear</option>
            @foreach (var year in ViewBag.distinctYears)
            {
                @if (year != ViewBag.selectedYear)
                {
                    <option value="@year">@year</option>
                }
            }
        </select>
    </form>
</div>
<br/>

@if (Model.SelectedYear.HasValue)
{
    <div class="row">
        <div class="col-md-4">
            <h4><b><u>@Model.SelectedYear Statistics</u></b></h4>
            <h5><b>Total Books Read: </b>@Model.TotalBooksRead</h5>
            <h5><b>Average Rating: </b>@(Model.AverageRating.HasValue ? Math.Round(Model.AverageRating.Value, 2) : (double?)null)</h5>
            <h5><b>Average Days Per Book: </b>@(Model.AverageDaysPerBook.HasValue ? Math.Round(Model.AverageDaysPerBook.Value, 2) : (double?)null)</h5>
            <h5><b>Total Pages Read: </b>@string.Format("{0:N0}", Model.TotalPagesRead)</h5>
            <h5><b>Top Author: </b>@Model.TopAuthor</h5>
        </div>
        <div class="col-md-5">
            <div style=" width: 100%; height: 100%;">
                <canvas id="genrePieChart"></canvas>
            </div>
        </div>
    </div>
}
else
{
    <p>No data available for the selected year.</p>
}


<script>
    var statisticData = @Html.Raw(Json.Serialize(Model));
    var labels = [];
    var data = [];
    var colors = [];

    Object.keys(statisticData.genreBreakdown).forEach(function (key) {
        var tuple = statisticData.genreBreakdown[key];
        var percentage = tuple.item1;
        var color = tuple.item2;

        labels.push(key);
        data.push(percentage);
        colors.push(color);
    });

    var ctx = document.getElementById('genrePieChart').getContext('2d');
    var genrePieChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: labels,
            datasets: [{
                data: data,
                backgroundColor: colors,
            }],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                title: {
                    display: true,
                    text: 'Genre Breakdown',
                    font : {size : 24 }
                },
                legend: {
                    display: true,
                    position: 'right',
                    labels: {
                        font: { size: 14 }
                    }
                }
            }
        },
    });
</script>
